@page "/Login"
@using Color = MudBlazor.Color
@using System.Threading.Tasks
@using Microsoft.AspNetCore.Components
@inject NavigationManager NavigationManager
@inject IJSRuntime JS

<style>
    body, html {
      height: 100%;
      
    }
    
    * {
      box-sizing: border-box;
    }
    
    .bg-image {
      /* The image used */
      background: rgb(34,193,195);
      background: linear-gradient(0deg, rgba(34,193,195,1) 0%, rgba(253,187,45,1) 100%);
    
      /* Add the blur effect */
      filter: blur(8px);
      -webkit-filter: blur(8px);
    
      /* Full height */
      height: 100%;
    
      /* Center and scale the image nicely */
      background-position: center;
      background-repeat: no-repeat;
      background-size: cover;
    }
    
    /* Position text in the middle of the page/image */
    .bg-text {
      background-color: rgb(0,0,0); /* Fallback color */
      background-color: rgba(0,0,0, 0.4); /* Black w/opacity/see-through */
      color: white;
      font-weight: bold;
      border: 3px solid #f1f1f1;
      position: absolute;
      top: 50%;
      left: 50%;
      transform: translate(-50%, -50%);
      z-index: 2;
      width: 80%;
      padding: 20px;
      text-align: center;
    }
    
    
</style>

<div class="bg-image"></div>


<MudContainer MaxWidth="MaxWidth.ExtraLarge" Class="mt-16">
     <MudGrid Justify="Justify.Center">
                        <img style="max-width: 200px; max-height: 200px" class="mud-typography-align-center" src="_content/WhoUnfollows/img/logo.png"/>
                    </MudGrid>
    <MudGrid Justify="Justify.Center">
        @* <div style="max-width: 400px;"> *@
        <MudCard Class="mud-grid-item-xs-8">
            @if (loading)
            {
                <MudText></MudText>
                <br/>
                <MudGrid Justify="Justify.Center">
                    
                    <MudProgressCircular Color="Color.Primary" Style="height:70px;width:70px;" Indeterminate="true"/>
                    
                </MudGrid>
                <MudText></MudText>
                <br/>
            }
            else
            {
                
            
            
            
                <MudCardContent>
                    <MudGrid Justify="Justify.Center">
                        <MudText Typo="Typo.h4">WhoUnfollows</MudText>
                    </MudGrid>





                    <MudForm @ref="form">
                        <MudTextField T="string"
                                      Label="Username"
                                      Required="true"
                                      @ref="usernamefield"
                                      RequiredError="User name is required!"/>

                        <MudTextField T="string" Label="Password"
                                      HelperText="Your Instagram Credinals"
                                      @ref="passwordfield"
                                      InputType="InputType.Password" Required="true"
                                      RequiredError="Password is required!"/>
                    </MudForm>
                </MudCardContent>
                <MudCardActions>
                    <MudButton Variant="Variant.Filled" Color="Color.Warning" OnClick="@(async () => await LoginButton())" Class="ml-auto">Login</MudButton>
                </MudCardActions>
            }
        </MudCard>
        
        <MudMessageBox @ref="mbox" Title="Warning" CancelText="Cancel">
            <MessageContent>
                <MudTextField T="string" Label="Two factor code"
                              HelperText="Your Instagram Credinals"
                              @ref="twofactorCode"
                              InputType="InputType.Text" Required="true"
                              RequiredError="Password is required!"/>
            </MessageContent>
            <YesButton>
                <MudButton OnClick="@(async () =>  TwoFactorLogin())" Variant="Variant.Filled" Color="Color.Error" StartIcon="@Icons.Material.Filled.DeleteForever">Login!</MudButton>
            </YesButton>
        </MudMessageBox>
        
         <MudMessageBox @ref="mmbox" Title="Warning" CancelText="Cancel">
                    <MessageContent>
                        <MudTextField T="string" @ref="errorText"></MudTextField>
                    </MessageContent>
                    <YesButton>
                        <MudButton Variant="Variant.Filled" Color="Color.Error" StartIcon="@Icons.Material.Filled.DeleteForever">Ok!</MudButton>
                    </YesButton>
                </MudMessageBox>


        @* <MudExpansionPanels> *@
        @*     <MudExpansionPanel Text="@($"Show Errors ({errors.Length})")"> *@
        @*         @foreach (var error in errors) *@
        @*         { *@
        @*             <MudText Color="@Color.Error">@error</MudText> *@
        @*         } *@
        @*     </MudExpansionPanel> *@
        @* </MudExpansionPanels> *@
        @* </div> *@
    </MudGrid>
</MudContainer>



@code {
    bool success;
    bool loading = false;
    //string[] errors = { };
    MudTextField<string> passwordfield;
    MudTextField<string> usernamefield;
    MudTextField<string> twofactorCode;
    MudTextField<string> errorText;
    MudForm form;
    MudMessageBox mbox { get; set; }
    [Inject] private IDialogService DialogService { get; set; }
    MudMessageBox mmbox { get; set; }

    private async Task LoginButton()
    {
        if (passwordfield.Text != null && usernamefield.Text != null)
        {
            loading = true;
            var sucsess = await UserState.Login(usernamefield.Text.ToLower(), passwordfield.Text);

            if (sucsess=="true")
            {
                NavigationManager.NavigateTo("/");
            }
            
            else if (sucsess=="twofactor")
            {
                await mbox.Show();
                //StateHasChanged();
            }
            else
            {
                await mmbox.Show();
                errorText.Text = sucsess.ToString();
                DialogService.Show<OkDialog>(sucsess);
            }
            loading = false;
        }
    }

    private async void TwoFactorLogin()
    {
        loading = true;
        var result = await UserState.TwoFactorLogin(usernamefield.Text.ToLower(), passwordfield.Text,twofactorCode.Text);
        if (result=="true")
        {
            StateHasChanged();
            NavigationManager.NavigateTo("/");
        }
        else
        {
            await mmbox.Show();
            errorText.Text = result;

            DialogService.Show<OkDialog>(result);
        }
        loading = false;
    }
    

}